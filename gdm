#!/usr/local/bin/python3.7m

import json
import socket
import sys
import urllib.request
from datetime import datetime
from time import sleep

from loguru import logger as log
from RPLCD.i2c import CharLCD

logfile = '/var/log/gdm.log'

log.configure(
    handlers=[dict(sink=sys.stdout, level="DEBUG", backtrace=True, format='<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>'),
              dict(sink=logfile, level="WARNING", enqueue=True, serialize=False, rotation="50 KB", retention="30 days", compression="gz")],
    levels=[dict(name="STARTUP", no=38, icon="Â¤", color="<yellow>")])


def discover_gsm():
    log.info(f'Waiting for data...')
    lcd.clear()
    lcd.cursor_pos = (1, 0)
    lcd.write_string('Searching for Sensor')
    client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)  # UDP
    client.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
    client.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    client.settimeout(5)
    client.bind(("", 37030))
    found = False
    while not found:
        client.sendto(b'GSM_DISCOVER', ('255.255.255.255', 37020))
        log.debug(f'Sent GSM_DISCOVER broadcast')
        try:
            (data, addr) = client.recvfrom(1024)
        except socket.timeout:
            pass
        else:
            log.info(f"Found GSM: {data.decode()} from {addr[0]}")
            found = True
    lcd.clear()
    lcd.cursor_pos = (1, 0)
    lcd.write_string('Found Sensor:')
    lcd.cursor_pos = (2, 0)
    lcd.write_string(f'{addr[0]}')
    sleep(5)
    return addr[0]


def space(string):
    while len(string) < 19:
        string = string + ' '
    log.debug(f'String padding: "{string}"')
    return string


def heartbeat(stime):
    try:
        while stime != 0:
            lcd.cursor_pos = (0, 14)
            lcd.write(32)
            sleep(.1)
            lcd.cursor_pos = (0, 14)
            lcd.write(58)
            sleep(.9)
            stime -= 1
    except:
        log.exception(f'Exception in heatbeat()')


def templine(data):
    global switch
    log.debug(f'Switching Temp Line Data: {data}')
    try:
        lcd.cursor_pos = (2, 0)
        if switch == 1:
            switch = 0
            lcd.write_string(f'T: {data["temptrend"]}')
            lcd.write(223)
            lcd.write_string(f'F  H: {data["humiditytrend"]}%')
        else:
            switch = 1
            lcd.write_string(f'T: {data["tempc"]}')
            lcd.write(223)
            lcd.write_string(f'F  H: {data["humidity"]}%')
    except:
        log.exception(f'Exception in templine()')


def displaydata(data):
    log.info(f'Displaying new data: {data}')
    try:
        datetime_object = datetime.strptime(data['timestamp'], '%Y-%m-%d %H:%M')
        ts = datetime_object.strftime("%b %d %Y %I:%M%p")
        lcd.cursor_pos = (0, 0)
        lcd.write_string(ts)
        lcd.cursor_pos = (1, 0)
        if int(data["darkness"]) < 300000:
            lcd.write_string(space(f'Lights ON ({data["lightscale"]}/100)'))
        else:
            lcd.write_string(space(f'Lights OFF  ({data["lightscale"]}/100)'))
        templine(data)
        lcd.cursor_pos = (3, 0)
        if not data['hasalarms']:
            lcd.write_string(space('     No Alerts'))
        else:
            lcd.write_string(space(f'ALERT: '))
    except:
        log.exception(f'Exception in displaydata()')
    else:
        log.debug(data)


log.log('STARTUP', 'GDM is starting up')
log.info(f'Initilizing LCD display')
lcd = CharLCD('PCF8574', 0x27)
lcd = CharLCD(i2c_expander='PCF8574', address=0x27, port=1, cols=20, rows=4, dotsize=8, charmap='A02', auto_linebreaks=False, backlight_enabled=True)

log.debug(f'Clearing LCD display')
lcd.clear()


ipaddr = discover_gsm()

switch = 0

while True:
    try:
        log.debug('Attempting to retrieve data')
        with urllib.request.urlopen(f"http://{ipaddr}/data") as url:
            data = json.loads(url.read().decode())
    except:
        log.error('Error getting remote data')
        heartbeat(60)

    else:
        try:
            displaydata(data)
            for a in range(6):
                heartbeat(10)
                templine(data)
        except:
            log.exception(f'Exception in main loop')
